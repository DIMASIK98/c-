// = оператор присваивания(присвает то что слева в то что справа)
// == оператор сравнения тоесть он берет точто слева 100/50 сравнивает с тем что справа == и пишет нам true тоесть истина
// bool isTwo = 1340/25 == 50;
// Console.WriteLine($"Значение переменной : {isTwo} ")
// БУЛЕВО;

// Переменные проверим по такой же схеме int это целочисленный вид данных поэтому мы не може 
// ввести сюда десятичные числа 1.16 только целые (целые true ) десятичные (false)
// ; точка с запятой это отсечка для компилятора что тут мы закончили и что он 
// может переходить смотреть данные на след строке это как точка в русском языке
// int number = 7;
// number++;
//number (++)  инкремент имеет важнейшое значение (это увеличение значения в этой переменной
// на единицу если number =1 то будет равно двум )
// // инкремент может быть префексным когда ++ стоят перед переменной 
// постфиксный после переменной 
// разница есть 
// int a = 5 ;
// int b = 2 ;
// int c = ++a / b ;
// если разделить а на б получится 2 так как переменная инт отсекает все числа 
// по идее должно было получиться 2.5 но получилось 2 если поставить инкремент при таком же действии результат будет на единицу больше 
// префиксный инкремент имеет больший приоритет чем  операторы умоножение деление 
// int a = 5 ;
// int b = 2 ;
// int c = a++ / b ;
// значение будет так же 2 так как приоритета у инкремента стало меньше 
// однако число а = 6 
// дело в том что при постфиксном инкременте оператор в самом начале вычисляет
// значение этого выражения a / b записывает его в левую часть а только потом переменная 
// переменная а увеличивается на единицу в префиксным все наоборот

// // есть такая вещь как переполнение переменной тоесть если мы заходим за грань
// значения переменной то мы грубо говоря заходим с другого конца и начинаем отсчет самого начала
// Переменная int может хранить в себе значение от -2147483648 до 2147483647
// если прописать команту 
// int num = 2147483647;
// num = num+1; 
// то консоль нам покажет -2147483648 это и означает что переменная переполнилась

// Если нам не хватает значение int то используем значение Long  в которой диапазон куда больше



// double decimalValue = 5.0/2;
//  Console.WriteLine($"Значение переменной : {decimalValue} " );
// double хранит в себе дробную часть довольно таки обширную 
// Если взять за пример выражение double decimalValue = 5/2 ;
// то покажет число 2 , потому что у нас два значения 5 и 2
// относятся к другому типу , а именно int (целые числа )
// Соответственно необходимо условие трактовать по другому 
// 5.0 / 2.0 тогда наше значение будет типа double 
// достаточно одному элменту иметь тип double 5.0/2
// или использовать еще один способ
// мы можем использовать преобразование типа для этого 
// сделаем следующее 
// double decimalValue = (double) 5/2:
// в скобках пишется тип данных в который мы хотим преобразовать



// СТРОКИ 
// String 

// string hello = "Привет";
// string world = "Мир!;
// string result = hello+world;
// Console.WriteLine(result);
// В данном случае мы решили использовать конкотернацию 
// тоесть сложение двух строк 
// мы создали две переменных и записываем в третью результат их сложения 
// Пробел явлется таким же символом 
// для строк используются только двойные ковычки 
// $ используется для подстановки интрапаляция строк 
// пример кода
// string predmet = "Фонарик ";
// Console.WriteLine($"Вы нашли предмет: {predmet}.  Желаете взять?");
// $ подставил строку
//  Есть еще один способ решения данной задачи 
    string predmet = "Фонарик ";
Console.WriteLine($"Вы нашли предмет: <{0}>  Желаете взять?",predmet);
// Вместо нуля у нас подставится значение переменной predmet 
// Это работает таким образом
// в программировании все работает с нуля соответственно точкой отсчета будет 0
// нулевая точка подстановки мы на эту самую точку подстановки просим подставить
// значение переменной predmet 
// 37.20 sek video



// Console.WriteLine($"Значение переменной : {num} " );